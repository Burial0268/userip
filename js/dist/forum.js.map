{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://gbcl-userip/webpack/bootstrap","webpack://gbcl-userip/webpack/runtime/compat get default export","webpack://gbcl-userip/webpack/runtime/define property getters","webpack://gbcl-userip/webpack/runtime/hasOwnProperty shorthand","webpack://gbcl-userip/webpack/runtime/make namespace object","webpack://gbcl-userip/external root \"flarum.core.compat['forum/app']\"","webpack://gbcl-userip/external root \"flarum.core.compat['common/extend']\"","webpack://gbcl-userip/external root \"flarum.core.compat['forum/components/CommentPost']\"","webpack://gbcl-userip/external root \"flarum.core.compat['common/Model']\"","webpack://gbcl-userip/./src/forum/ProcessData.tsx","webpack://gbcl-userip/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://gbcl-userip/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://gbcl-userip/external root \"flarum.core.compat['common/Component']\"","webpack://gbcl-userip/./src/forum/components/GeoIpToolBar.tsx","webpack://gbcl-userip/external root \"flarum.core.compat['common/extenders']\"","webpack://gbcl-userip/external root \"flarum.core.compat['common/models/Post']\"","webpack://gbcl-userip/./src/forum/Model/ipinfo.ts","webpack://gbcl-userip/./src/forum/extend.ts","webpack://gbcl-userip/./src/forum/index.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/CommentPost'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","/*\n * This file is part of GBCLStudio Project.\n *\n * Copyright (c) 2023 GBCLStudio PHP Project Team.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport {NestedStringArray} from \"@askvortsov/rich-icu-message-formatter\";\nimport ipinfo from \"./Model/ipinfo\";\n\nexport default class ProcessData {\n    [x: string]: any;\n\n    getData(ipInfo: ipinfo) {\n        this.region = ipInfo.region()\n        this.code = ipInfo.countryCode()\n        this.isp = ipInfo.isp()\n        return this\n    };\n\n    process(errorNotice: NestedStringArray) {\n        return [this.region, this.code, this.isp].reduce(\n            (acc, el, index) => {\n                let count = acc.count;\n                if (el === null || el === undefined || el === \"\") {\n                    ++count;\n                    el = errorNotice;\n                }\n                acc.elements[index] = el;\n                acc.count = count;\n                return acc;\n            }, {count: 0, elements: []})\n    }\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","/*\n * This file is part of GBCLStudio Project.\n *\n * Copyright (c) 2023 GBCLStudio PHP Project Team.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport Component, {ComponentAttrs} from \"flarum/common/Component\";\nimport type Mithril from 'mithril';\n\nexport interface GeoIpBarAttrs extends ComponentAttrs {\n    code: string;\n    region: string;\n    isp: string;\n}\n\nexport default class GeoIpToolBar<CustomAttrs extends GeoIpBarAttrs = GeoIpBarAttrs> extends Component<CustomAttrs> {\n    view(vnode: Mithril.VnodeDOM<CustomAttrs, this>) {\n        let {code, region, isp} = this.attrs;\n        return (\n            <div className=\"userIp-container\">\n                <div className=\"ip-locate\" id=\"info\">\n                    {`${region}, ${code} | ${isp}`}\n                </div>\n            </div>\n        )\n    }\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extenders'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Post'];","/*\n * This file is part of GBCLStudio Project.\n *\n * Copyright (c) 2023 GBCLStudio PHP Project Team.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport Model from 'flarum/common/Model';\n\nexport default class ipinfo extends Model {\n    countryCode = Model.attribute('countryCode') as any\n    region = Model.attribute('region') as any\n    isp = Model.attribute('isp') as any\n}","/*\n * This file is part of GBCLStudio Project.\n *\n * Copyright (c) 2023 GBCLStudio PHP Project Team.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport Extend from 'flarum/common/extenders';\nimport Post from 'flarum/common/models/Post';\nimport ipinfo from './Model/ipinfo';\n\nexport default [\n    new Extend.Model(Post)\n        .hasOne<ipinfo>('userip_info')\n        .attribute<ipinfo>('userIpInfo'),\n\n    new Extend.Store()\n        .add('userip_info', ipinfo),\n];","/*\n * This file is part of GBCLStudio Project.\n *\n * Copyright (c) 2023 GBCLStudio PHP Project Team.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport app from 'flarum/forum/app';\nimport {extend} from \"flarum/common/extend\";\nimport CommentPost from 'flarum/forum/components/CommentPost';\nimport Model from 'flarum/common/Model';\nimport ProcessData from \"./ProcessData\";\nimport GeoIpToolBar from \"./components/GeoIpToolBar\";\n\n// still learning\nexport { default as extend } from './extend';\n\napp.initializers.add('gbcl/userip', () => {\n\n    const errorNotice = app.translator.trans(\"gbcl-userip.forum.unknownNotice\");\n\n    app.store.models.posts.prototype.userIpInfo = Model.hasOne('userip_info');\n\n    extend(CommentPost.prototype, 'footerItems', function (items) {\n\n        const ipInfo = this.attrs.post.userIpInfo();\n        if (!ipInfo) return;\n\n        const result = new ProcessData().getData(ipInfo).process(errorNotice)\n        const [reg, code, serv] = result.elements;\n        const errorCount = result.count;\n\n        if (errorCount < 2) {\n            items.add(\n                'userIp',\n                <GeoIpToolBar region={reg} code={code} isp={serv}/>\n            )\n        }\n    })\n})\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","ProcessData","getData","ipInfo","this","region","code","countryCode","isp","process","errorNotice","reduce","acc","el","index","count","elements","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_inheritsLoose","subClass","superClass","create","constructor","GeoIpToolBar","view","vnode","attrs","className","id","Component","ipinfo","Model","Extend","Post","hasOne","attribute","add","app","extend","CommentPost","items","post","userIpInfo","result","reg","serv"],"sourceRoot":""}