{"version":3,"file":"forum.js","mappings":"MACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDR,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,+BCL9D,MAAM,EAA+BC,OAAOC,KAAKC,OAAO,a,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,iBCAlD,EAA+BF,OAAOC,KAAKC,OAAO,gC,aCAzC,SAASC,EAAgBhB,EAAGiB,GAKzC,OAJAD,EAAkBf,OAAOiB,eAAiBjB,OAAOiB,eAAeC,OAAS,SAAyBnB,EAAGiB,GAEnG,OADAjB,EAAEoB,UAAYH,EACPjB,CACR,EACMgB,EAAgBhB,EAAGiB,EAC3B,CCND,MAAM,EAA+BJ,OAAOC,KAAKC,OAAO,gB,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,sB,ICYnCM,EAAAA,SAAAA,GCXN,IAAwBC,EAAUC,E,yDAAAA,E,GAAVD,E,GAC5Bf,UAAYN,OAAOuB,OAAOD,EAAWhB,WAC9Ce,EAASf,UAAUkB,YAAcH,EACjCJ,EAAeI,EAAUC,G,EDQNF,C,MAAeK,GAAMC,IAAO,CAC7CC,YAAaD,IAAAA,UAAgB,eAC7BE,OAAQF,IAAAA,UAAgB,UACxBG,IAAKH,IAAAA,UAAgB,UEUzBI,IAAAA,aAAAA,IAAqB,eAAe,WAEhC,IAAMC,EAAcD,IAAAA,WAAAA,MAAqB,mCAEzCA,IAAAA,MAAAA,OAAAA,YAA+BV,EAC/BU,IAAAA,MAAAA,OAAAA,MAAAA,UAAAA,OAA0CJ,IAAAA,OAAa,gBAEvDM,EAAAA,EAAAA,QAAOC,IAAAA,UAAuB,eAAe,SAAUC,GAEnD,IAAMC,EAASC,KAAKC,MAAMC,KAAKH,SAE/B,GAAKA,EAAL,CAEA,MAtBQ,SAACA,GACb,MAAO,CACHP,OAAQO,EAAOP,SACfD,YAAaQ,EAAOR,cACpBE,IAAKM,EAAON,MAEnB,CAgB8CU,CAAQJ,GAAvCP,EAAR,EAAQA,OAASD,EAAjB,EAAiBA,YAAcE,EAA/B,EAA+BA,IAEd,CAACD,EAAQD,EAAaE,GAAKW,QACxC,SAACC,EAAIC,GAAL,MACW,SAAPD,GACAA,IAAOV,GACPU,IACEC,EAAQA,CAJd,GAKH,GAEgB,GAEbR,EAAMS,IACF,SACA,SAAKC,UAAU,oBACX,SAAKA,UAAU,YAAYC,GAAG,QACtBjB,EADR,KACmBD,EADnB,MACoCE,IAlB7B,CAuBtB,GACJ,G","sources":["webpack://gbcl-userip/webpack/bootstrap","webpack://gbcl-userip/webpack/runtime/compat get default export","webpack://gbcl-userip/webpack/runtime/define property getters","webpack://gbcl-userip/webpack/runtime/hasOwnProperty shorthand","webpack://gbcl-userip/webpack/runtime/make namespace object","webpack://gbcl-userip/external root \"flarum.core.compat['forum/app']\"","webpack://gbcl-userip/external root \"flarum.core.compat['common/extend']\"","webpack://gbcl-userip/external root \"flarum.core.compat['forum/components/CommentPost']\"","webpack://gbcl-userip/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://gbcl-userip/external root \"flarum.core.compat['common/Model']\"","webpack://gbcl-userip/external root \"flarum.core.compat['common/utils/mixin']\"","webpack://gbcl-userip/./src/forum/Model/ipinfo.js","webpack://gbcl-userip/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://gbcl-userip/./src/forum/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/CommentPost'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/mixin'];","/*\n * This file is part of GBCLStudio Project.\n *\n * Copyright (c) 2023 GBCLStudio PHP Project Team.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport Model from 'flarum/common/Model';\nimport mixin from 'flarum/common/utils/mixin';\n\nexport default class ipinfo extends mixin(Model, {\n    countryCode: Model.attribute('countryCode'),\n    region: Model.attribute('region'),\n    isp: Model.attribute('isp'),\n}) {}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","/*\n * This file is part of GBCLStudio Project.\n *\n * Copyright (c) 2023 GBCLStudio PHP Project Team.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport CommentPost from 'flarum/forum/components/CommentPost';\nimport ipinfo from './Model/ipinfo';\nimport Model from 'flarum/common/Model';\n\n// @ts-ignore\nconst getData = (ipInfo) => {\n    return {\n        region: ipInfo.region(),\n        countryCode: ipInfo.countryCode(),\n        isp: ipInfo.isp()\n    };\n};\n\n\napp.initializers.add('gbcl/userip', () => {\n\n    const errorNotice = app.translator.trans(\"gbcl-userip.forum.unknownNotice\");\n\n    app.store.models.userip_info = ipinfo;\n    app.store.models.posts.prototype.ipInfo = Model.hasOne('userip_info');\n\n    extend(CommentPost.prototype, 'footerItems', function (items) {\n\n        const ipInfo = this.attrs.post.ipInfo();\n\n        if (!ipInfo) return;\n\n        const { region , countryCode , isp } = getData(ipInfo);\n\n        let errorCount = [region, countryCode, isp].reduce(\n            (el, count)=> (\n                el === \"null\"      ||\n                el === errorNotice ||\n                el\n            ) ? ++count : count\n        ,0)\n\n        if (errorCount < 2)\n        {\n            items.add(\n                'userIp',\n                <div className=\"userIp-container\">\n                    <div className=\"ip-locate\" id=\"info\">\n                        {`${region}, ${countryCode} | ${isp}`}\n                    </div>\n                </div>\n            );\n        }\n    })\n})"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","ipinfo","subClass","superClass","create","constructor","mixin","Model","countryCode","region","isp","app","errorNotice","extend","CommentPost","items","ipInfo","this","attrs","post","getData","reduce","el","count","add","className","id"],"sourceRoot":""}