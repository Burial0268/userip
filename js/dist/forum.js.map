{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://gbcl-userip/webpack/bootstrap","webpack://gbcl-userip/webpack/runtime/compat get default export","webpack://gbcl-userip/webpack/runtime/define property getters","webpack://gbcl-userip/webpack/runtime/hasOwnProperty shorthand","webpack://gbcl-userip/webpack/runtime/make namespace object","webpack://gbcl-userip/external root \"flarum.core.compat['forum/app']\"","webpack://gbcl-userip/external root \"flarum.core.compat['common/extend']\"","webpack://gbcl-userip/external root \"flarum.core.compat['forum/components/CommentPost']\"","webpack://gbcl-userip/external root \"flarum.core.compat['common/Model']\"","webpack://gbcl-userip/./src/forum/ProcessData.tsx","webpack://gbcl-userip/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://gbcl-userip/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://gbcl-userip/external root \"flarum.core.compat['common/Component']\"","webpack://gbcl-userip/./src/forum/components/GeoIpToolBar.tsx","webpack://gbcl-userip/external root \"flarum.core.compat['common/extenders']\"","webpack://gbcl-userip/external root \"flarum.core.compat['common/models/Post']\"","webpack://gbcl-userip/./src/forum/Model/IPInfo.ts","webpack://gbcl-userip/./src/forum/extend.ts","webpack://gbcl-userip/./src/forum/index.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/CommentPost'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","/*\n * This file is part of GBCLStudio Project.\n *\n * Copyright (c) 2023 GBCLStudio PHP Project Team.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport { NestedStringArray } from '@askvortsov/rich-icu-message-formatter'\nimport ipinfo from './Model/IPInfo'\n\nexport default class ProcessData {\n  private region: NestedStringArray\n  private code: NestedStringArray\n  private isp: NestedStringArray\n\n  constructor(ipInfo: ipinfo) {\n    this.region = ipInfo.region()\n    this.code = ipInfo.countryCode()\n    this.isp = ipInfo.isp()\n  }\n\n  process(errorNotice: NestedStringArray) {\n    return [this.region, this.code, this.isp].reduce(\n      (acc, el, index) => {\n        let count = acc.count\n        if (el === null || el === undefined || el === '') {\n          ++count\n          el = errorNotice\n        }\n        acc.elements[index] = el\n        acc.count = count\n        return acc\n      },\n      { count: 0, elements: [] as NestedStringArray[] }\n    )\n  }\n}\n","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","/*\n * This file is part of GBCLStudio Project.\n *\n * Copyright (c) 2023 GBCLStudio PHP Project Team.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport Component, { ComponentAttrs } from 'flarum/common/Component'\n\nexport interface GeoIpBarAttrs extends ComponentAttrs {\n  code: string\n  region: string\n  isp: string\n}\n\nexport default class GeoIpToolBar<\n  CustomAttrs extends GeoIpBarAttrs = GeoIpBarAttrs\n> extends Component<CustomAttrs> {\n  view() {\n    const { code, region, isp } = this.attrs\n    return (\n      <div className='userIp-container'>\n        <div className='ip-locate' id='info-country'>\n          {`${region}, ${code}`}\n        </div>\n        <div className='ip-locate' id='info-isp'>\n          {`${isp}`}\n        </div>\n      </div>\n    )\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extenders'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Post'];","/*\n * This file is part of GBCLStudio Project.\n *\n * Copyright (c) 2023 GBCLStudio PHP Project Team.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport { NestedStringArray } from '@askvortsov/rich-icu-message-formatter'\nimport Model from 'flarum/common/Model'\n\nexport default class IPInfo extends Model {\n  countryCode = Model.attribute<NestedStringArray>('countryCode')\n  region = Model.attribute<NestedStringArray>('region')\n  isp = Model.attribute<NestedStringArray>('isp')\n}\n","/*\n * This file is part of GBCLStudio Project.\n *\n * Copyright (c) 2023 GBCLStudio PHP Project Team.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport Extend from 'flarum/common/extenders'\nimport Post from 'flarum/common/models/Post'\nimport ipinfo from './Model/IPInfo'\n\nexport default [\n  new Extend.Model(Post)\n    .hasOne<ipinfo>('userip_info')\n    .attribute<ipinfo>('userIpInfo'),\n\n  new Extend.Store().add('userip_info', ipinfo),\n]\n","/*\n * This file is part of GBCLStudio Project.\n *\n * Copyright (c) 2023 GBCLStudio PHP Project Team.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport app from 'flarum/forum/app'\nimport { extend } from 'flarum/common/extend'\nimport CommentPost from 'flarum/forum/components/CommentPost'\nimport Model from 'flarum/common/Model'\nimport ProcessData from './ProcessData'\nimport GeoIpToolBar from './components/GeoIpToolBar'\n\n// still learning\nexport { default as extend } from './extend'\n\napp.initializers.add('gbcl/userip', () => {\n  const errorNotice = app.translator.trans('gbcl-userip.forum.unknownNotice')\n\n  app.store.models.posts.prototype.userIpInfo = Model.hasOne('userip_info')\n\n  extend(CommentPost.prototype, 'footerItems', function (items) {\n    const ipInfo = this.attrs.post.userIpInfo()\n    if (!ipInfo) return\n\n    const result = new ProcessData(ipInfo).process(errorNotice)\n    const [reg, code, serv] = result.elements\n    const errorCount = result.count\n\n    if (errorCount < 2) {\n      items.add('userIp', <GeoIpToolBar region={reg} code={code} isp={serv} />)\n    }\n  })\n})\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","ProcessData","ipInfo","region","code","isp","this","countryCode","process","errorNotice","reduce","acc","el","index","count","elements","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_inheritsLoose","subClass","superClass","create","constructor","GeoIpToolBar","_Component","apply","arguments","view","_this$attrs","attrs","m","className","id","Component","IPInfo","_Model","_this","_len","length","args","Array","_key","concat","Model","Extend","Post","hasOne","attribute","add","ipinfo","app","trans","models","posts","userIpInfo","extend","CommentPost","items","post","result","_result$elements","reg","serv"],"sourceRoot":""}