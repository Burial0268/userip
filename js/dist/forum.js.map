{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://gbcl-userip/webpack/bootstrap","webpack://gbcl-userip/webpack/runtime/compat get default export","webpack://gbcl-userip/webpack/runtime/define property getters","webpack://gbcl-userip/webpack/runtime/hasOwnProperty shorthand","webpack://gbcl-userip/webpack/runtime/make namespace object","webpack://gbcl-userip/external root \"flarum.core.compat['forum/app']\"","webpack://gbcl-userip/external root \"flarum.core.compat['common/extend']\"","webpack://gbcl-userip/external root \"flarum.core.compat['forum/components/CommentPost']\"","webpack://gbcl-userip/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://gbcl-userip/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://gbcl-userip/external root \"flarum.core.compat['common/Model']\"","webpack://gbcl-userip/./src/forum/Model/ipinfo.ts","webpack://gbcl-userip/./src/forum/ProcessData.tsx","webpack://gbcl-userip/external root \"flarum.core.compat['common/Component']\"","webpack://gbcl-userip/./src/forum/components/GeoIpToolBar.tsx","webpack://gbcl-userip/./src/forum/index.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/CommentPost'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","/*\n * This file is part of GBCLStudio Project.\n *\n * Copyright (c) 2023 GBCLStudio PHP Project Team.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport Model from 'flarum/common/Model';\n\nexport default class ipinfo extends Model {\n    countryCode = Model.attribute('countryCode') as any\n    region = Model.attribute('region') as any\n    isp = Model.attribute('isp') as any\n}","/*\n * This file is part of GBCLStudio Project.\n *\n * Copyright (c) 2023 GBCLStudio PHP Project Team.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport { NestedStringArray } from \"@askvortsov/rich-icu-message-formatter\";\nimport ipinfo from \"./Model/ipinfo\";\n\nexport default class ProcessData {\n    [x: string]: any;\n\n    getData(ipInfo: ipinfo) {\n        this.region = ipInfo.region()\n        this.code = ipInfo.countryCode()\n        this.isp = ipInfo.isp()\n        return this\n    };\n\n    process(errorNotice: NestedStringArray) {\n        return [this.region, this.code, this.isp].reduce(\n            (acc, el, index) => {\n                let count = acc.count;\n                if (el === null || el === undefined || el === \"\") {\n                    ++count;\n                    el = errorNotice;\n                }\n                acc.elements[index] = el;\n                acc.count = count;\n                return acc;\n            }, {count: 0, elements: []})\n    }\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","/*\n * This file is part of GBCLStudio Project.\n *\n * Copyright (c) 2023 GBCLStudio PHP Project Team.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport Component, { ComponentAttrs } from \"flarum/common/Component\";\nimport type Mithril from 'mithril';\n\nexport interface GeoIpBarAttrs extends ComponentAttrs {\n    code: string;\n    region: string;\n    isp: string;\n}\n\nexport default class GeoIpToolBar<CustomAttrs extends GeoIpBarAttrs = GeoIpBarAttrs> extends Component<CustomAttrs> {\n    view(vnode: Mithril.VnodeDOM<CustomAttrs, this>) {\n        let { code, region, isp } = this.attrs;\n        return (\n            <div className=\"userIp-container\">\n                <div className=\"ip-locate\" id=\"info\">\n                    {`${region}, ${code} | ${isp}`}\n                </div>\n            </div>\n        )\n    }\n}","/*\n * This file is part of GBCLStudio Project.\n *\n * Copyright (c) 2023 GBCLStudio PHP Project Team.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport app from 'flarum/forum/app';\nimport { extend } from \"flarum/common/extend\";\nimport CommentPost from 'flarum/forum/components/CommentPost';\nimport ipinfo from './Model/ipinfo';\nimport ProcessData from \"./ProcessData\";\nimport Model from 'flarum/common/Model';\nimport GeoIpToolBar from \"./components/GeoIpToolBar\";\n\napp.initializers.add('gbcl/userip', () => {\n\n    const errorNotice = app.translator.trans(\"gbcl-userip.forum.unknownNotice\");\n\n    app.store.models.userip_info = ipinfo;\n    // @ts-ignore\n    app.store.models.posts.prototype.userIpInfo = Model.hasOne('userip_info');\n\n    extend(CommentPost.prototype, 'footerItems', function (items) {\n\n        // @ts-ignore\n        const ipInfo = this.attrs.post.userIpInfo();\n        if (!ipInfo) return;\n\n        const result = new ProcessData().getData(ipInfo).process(errorNotice)\n        const [reg, code, serv] = result.elements;\n        const errorCount = result.count;\n\n        if (errorCount < 2) {\n            items.add(\n                'userIp',\n                <GeoIpToolBar region={reg} code={code} isp={serv} />\n            )\n        }\n    })\n})"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_inheritsLoose","subClass","superClass","create","constructor","ipinfo","countryCode","Model","region","isp","ProcessData","getData","ipInfo","this","code","process","errorNotice","reduce","acc","el","index","count","elements","GeoIpToolBar","view","vnode","attrs","className","id","Component","app","extend","CommentPost","items","post","userIpInfo","result","reg","serv","add"],"sourceRoot":""}